{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","gClefNotes","fClefNotes","currentClef","setCurrentClef","useState","notes","setNotes","notePositions","G","C6","B5","A5","G5","F5","E5","D5","C5","B4","A4","G4","F4","E4","D4","C4","B3","F","A3","G3","F3","E3","D3","C3","B2","A2","G2","F2","E2","D2","C2","getNotePosition","note","regenerateMusic","Math","random","generateRandomNotes","numberOfNotes","floor","availableNotes","Array","from","length","useEffect","React","createElement","style","minHeight","backgroundColor","padding","maxWidth","margin","borderRadius","boxShadow","display","justifyContent","alignItems","marginBottom","fontSize","fontWeight","color","onClick","gap","border","cursor","width","height","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","map","i","key","x1","y1","x2","y2","x","y","fontFamily","index","cx","cy","rx","ry","transform","marginTop","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.a1289d61.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction App() {\n  // Define available notes for each clef\n  const gClefNotes = ['B3', 'C4', 'D4', 'E4', 'F4', 'G4', 'A4', 'B4', 'C5', 'D5', 'E5', 'F5', 'G5', 'A5', 'B5', 'C6', 'D6'];\n  const fClefNotes = ['C2', 'D2', 'E2', 'F2', 'G2', 'A2', 'B2', 'C3', 'D3', 'E3', 'F3', 'G3', 'A3', 'B3', 'C4'];\n\n  const [currentClef, setCurrentClef] = useState('G');\n  const [notes, setNotes] = useState([]);\n\n  const notePositions = {\n    'G': {\n      'C6': 0, 'B5': 1, 'A5': 2, 'G5': 3, 'F5': 4, 'E5': 5, 'D5': 6, 'C5': 7,\n      'B4': 8, 'A4': 9, 'G4': 10, 'F4': 11, 'E4': 12, 'D4': 13, 'C4': 14, 'B3': 15\n    },\n    'F': {\n      'C4': 0, 'B3': 1, 'A3': 2, 'G3': 3, 'F3': 4, 'E3': 5, 'D3': 6, 'C3': 7,\n      'B2': 8, 'A2': 9, 'G2': 10, 'F2': 11, 'E2': 12, 'D2': 13, 'C2': 14\n    }\n  };\n\n  const generateRandomNotes = () => {\n    const numberOfNotes = Math.floor(Math.random() * 8) + 4; // Generate 4-12 notes\n    const availableNotes = currentClef === 'G' ? gClefNotes : fClefNotes;\n    return Array.from({ length: numberOfNotes }, () => \n      availableNotes[Math.floor(Math.random() * availableNotes.length)]\n    );\n  };\n\n  const getNotePosition = (note) => {\n    return notePositions[currentClef][note] * 5;\n  };\n\n  const regenerateMusic = () => {\n    setCurrentClef(Math.random() < 0.5 ? 'G' : 'F');\n    setNotes(generateRandomNotes());\n  };\n\n  useEffect(() => {\n    regenerateMusic();\n  }, []);\n\n  return (\n    <div style={{ \n      minHeight: '100vh', \n      backgroundColor: '#f3f4f6', \n      padding: '3rem 1rem'\n    }}>\n      <div style={{\n        maxWidth: '42rem',\n        margin: '0 auto',\n      }}>\n        <div style={{\n          backgroundColor: 'white',\n          borderRadius: '0.5rem',\n          padding: '1.5rem',\n          boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',\n        }}>\n          <div style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginBottom: '1.5rem',\n          }}>\n            <h1 style={{\n              fontSize: '1.5rem',\n              fontWeight: 'bold',\n              color: '#111827',\n            }}>\n              Random Sheet Music ({currentClef} Clef)\n            </h1>\n            <button\n              onClick={regenerateMusic}\n              style={{\n                backgroundColor: '#3b82f6',\n                color: 'white',\n                padding: '0.5rem 1rem',\n                borderRadius: '0.375rem',\n                display: 'flex',\n                alignItems: 'center',\n                gap: '0.5rem',\n                border: 'none',\n                cursor: 'pointer',\n              }}\n            >\n              <svg\n                style={{\n                  width: '1rem',\n                  height: '1rem',\n                }}\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"\n                />\n              </svg>\n              Generate New\n            </button>\n          </div>\n          \n          <svg viewBox=\"0 0 400 100\" style={{ width: '100%' }}>\n            {/* Staff lines */}\n            {[0, 1, 2, 3, 4].map((i) => (\n              <line\n                key={`staff-${i}`}\n                x1=\"10\"\n                y1={20 + i * 10}\n                x2=\"390\"\n                y2={20 + i * 10}\n                stroke=\"black\"\n                strokeWidth=\"1\"\n              />\n            ))}\n            \n            {/* Clef symbol */}\n            <text x=\"15\" y=\"45\" fontSize=\"40\" fontFamily=\"serif\">\n              {currentClef === 'G' ? '\\u{1D11E}' : '\\u{1D122}'}\n            </text>\n\n            {/* Notes */}\n            {notes.map((note, index) => (\n              <g key={`note-${index}`}>\n                <ellipse\n                  cx={80 + index * 40}\n                  cy={20 + getNotePosition(note)}\n                  rx=\"6\"\n                  ry=\"4\"\n                  transform={`rotate(-20, ${80 + index * 40}, ${20 + getNotePosition(note)})`}\n                  fill=\"black\"\n                />\n                <line\n                  x1={86 + index * 40}\n                  y1={20 + getNotePosition(note)}\n                  x2={86 + index * 40}\n                  y2={20 + getNotePosition(note) - 30}\n                  stroke=\"black\"\n                  strokeWidth=\"1\"\n                />\n              </g>\n            ))}\n          </svg>\n          \n          <div style={{\n            marginTop: '1.5rem',\n            fontSize: '0.875rem',\n            color: '#6b7280',\n          }}>\n            Click \"Generate New\" or refresh the page to create new random sheet music.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}