{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","GCLEF_NOTES","FCLEF_NOTES","NOTE_POSITIONS","G","A5","G5","F5","E5","D5","C5","B4","A4","G4","F4","E4","D4","C4","F","B3","A3","G3","F3","E3","D3","C3","B2","A2","G2","F2","E2","LEDGER_LINES","currentClef","setCurrentClef","useState","notes","setNotes","getNotePosition","useCallback","numberOfNotes","Math","floor","random","availableNotes","Array","from","length","note","needsLedgerLines","regenerateMusic","newClef","useEffect","React","createElement","style","minHeight","backgroundColor","padding","maxWidth","margin","borderRadius","boxShadow","display","justifyContent","alignItems","marginBottom","fontSize","fontWeight","color","onClick","gap","border","cursor","width","height","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","map","i","key","x1","y1","x2","y2","x","y","fontFamily","index","ledgerLineCount","noteY","abs","_","cx","cy","rx","ry","transform","marginTop","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.dc19ced3.chunk.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n\nfunction App() {\n  // Move these outside of the component to avoid recreating them on every render\n  const GCLEF_NOTES = ['C4', 'D4', 'E4', 'F4', 'G4', 'A4', 'B4', 'C5', 'D5', 'E5', 'F5', 'G5', 'A5'];\n  const FCLEF_NOTES = ['E2', 'F2', 'G2', 'A2', 'B2', 'C3', 'D3', 'E3', 'F3', 'G3', 'A3', 'B3', 'C4'];\n  \n  const NOTE_POSITIONS = {\n    'G': {\n      'A5': 2, 'G5': 3, 'F5': 4, 'E5': 5, 'D5': 6, 'C5': 7, 'B4': 8,\n      'A4': 9, 'G4': 10, 'F4': 11, 'E4': 12, 'D4': 13, 'C4': 14\n    },\n    'F': {\n      'C4': 2, 'B3': 3, 'A3': 4, 'G3': 5, 'F3': 6, 'E3': 7, 'D3': 8,\n      'C3': 9, 'B2': 10, 'A2': 11, 'G2': 12, 'F2': 13, 'E2': 14\n    }\n  };\n\n  const LEDGER_LINES = {\n    'G': {\n      'A5': 2,    // 2 ledger lines above\n      'G5': 1,    // 1 ledger line above\n      'G4': -1,   // 1 ledger line below\n      'F4': -2,   // 2 ledger lines below\n      'E4': -2,\n      'D4': -2,\n      'C4': -2,\n    },\n    'F': {\n      'C4': 2,    // 2 ledger lines above\n      'B3': 1,    // 1 ledger line above\n      'B2': -1,   // 1 ledger line below\n      'A2': -2,   // 2 ledger lines below\n      'G2': -2,\n      'F2': -2,\n      'E2': -2,\n    }\n  };\n\n  const [currentClef, setCurrentClef] = useState('G');\n  const [notes, setNotes] = useState([]);\n\n  const generateRandomNotes = useCallback(() => {\n    const numberOfNotes = Math.floor(Math.random() * 8) + 4;\n    const availableNotes = currentClef === 'G' ? GCLEF_NOTES : FCLEF_NOTES;\n    return Array.from({ length: numberOfNotes }, () => \n      availableNotes[Math.floor(Math.random() * availableNotes.length)]\n    );\n  }, [currentClef]);\n\n  const getNotePosition = useCallback((note) => {\n    return NOTE_POSITIONS[currentClef][note] * 5;\n  }, [currentClef]);\n\n  const needsLedgerLines = useCallback((note) => {\n    return LEDGER_LINES[currentClef][note] || 0;\n  }, [currentClef]);\n\n  const regenerateMusic = useCallback(() => {\n    const newClef = Math.random() < 0.5 ? 'G' : 'F';\n    setCurrentClef(newClef);\n    setNotes(Array.from({ length: Math.floor(Math.random() * 8) + 4 }, () => {\n      const availableNotes = newClef === 'G' ? GCLEF_NOTES : FCLEF_NOTES;\n      return availableNotes[Math.floor(Math.random() * availableNotes.length)];\n    }));\n  }, []);\n\n  // Only run once on mount\n  useEffect(() => {\n    regenerateMusic();\n  }, []); // Empty dependency array\n\n  return (\n    <div style={{ \n      minHeight: '100vh', \n      backgroundColor: '#f3f4f6', \n      padding: '3rem 1rem'\n    }}>\n      <div style={{\n        maxWidth: '42rem',\n        margin: '0 auto',\n      }}>\n        <div style={{\n          backgroundColor: 'white',\n          borderRadius: '0.5rem',\n          padding: '1.5rem',\n          boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)',\n        }}>\n          <div style={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            marginBottom: '1.5rem',\n          }}>\n            <h1 style={{\n              fontSize: '1.5rem',\n              fontWeight: 'bold',\n              color: '#111827',\n            }}>\n              Random Sheet Music ({currentClef} Clef)\n            </h1>\n            <button\n              onClick={regenerateMusic}\n              style={{\n                backgroundColor: '#3b82f6',\n                color: 'white',\n                padding: '0.5rem 1rem',\n                borderRadius: '0.375rem',\n                display: 'flex',\n                alignItems: 'center',\n                gap: '0.5rem',\n                border: 'none',\n                cursor: 'pointer',\n              }}\n            >\n              <svg\n                style={{\n                  width: '1rem',\n                  height: '1rem',\n                }}\n                fill=\"none\"\n                stroke=\"currentColor\"\n                viewBox=\"0 0 24 24\"\n              >\n                <path\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  strokeWidth={2}\n                  d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"\n                />\n              </svg>\n              Generate New\n            </button>\n          </div>\n          \n          <svg viewBox=\"0 0 400 100\" style={{ width: '100%' }}>\n            {/* Staff lines */}\n            {[0, 1, 2, 3, 4].map((i) => (\n              <line\n                key={`staff-${i}`}\n                x1=\"10\"\n                y1={20 + i * 10}\n                x2=\"390\"\n                y2={20 + i * 10}\n                stroke=\"black\"\n                strokeWidth=\"1\"\n              />\n            ))}\n            \n            {/* Clef symbol */}\n            <text x=\"15\" y=\"45\" fontSize=\"40\" fontFamily=\"serif\">\n              {currentClef === 'G' ? '\\u{1D11E}' : '\\u{1D122}'}\n            </text>\n\n            {/* Notes with ledger lines */}\n            {notes.map((note, index) => {\n              const ledgerLineCount = needsLedgerLines(note);\n              const noteY = 20 + getNotePosition(note);\n              \n              return (\n                <g key={`note-${index}`}>\n                  {/* Ledger lines */}\n                  {ledgerLineCount !== 0 && Array.from(\n                    { length: Math.abs(ledgerLineCount) },\n                    (_, i) => (\n                      <line\n                        key={`ledger-${i}`}\n                        x1={73 + index * 40}\n                        y1={noteY + (ledgerLineCount > 0 ? -i * 10 : i * 10)}\n                        x2={87 + index * 40}\n                        y2={noteY + (ledgerLineCount > 0 ? -i * 10 : i * 10)}\n                        stroke=\"black\"\n                        strokeWidth=\"1\"\n                      />\n                    )\n                  )}\n                  \n                  {/* Note head */}\n                  <ellipse\n                    cx={80 + index * 40}\n                    cy={noteY}\n                    rx=\"6\"\n                    ry=\"4\"\n                    transform={`rotate(-20, ${80 + index * 40}, ${noteY})`}\n                    fill=\"black\"\n                  />\n                  \n                  {/* Note stem */}\n                  <line\n                    x1={86 + index * 40}\n                    y1={noteY}\n                    x2={86 + index * 40}\n                    y2={noteY - 30}\n                    stroke=\"black\"\n                    strokeWidth=\"1\"\n                  />\n                </g>\n              );\n            })}\n          </svg>\n          \n          <div style={{\n            marginTop: '1.5rem',\n            fontSize: '0.875rem',\n            color: '#6b7280',\n          }}>\n            Click \"Generate New\" or refresh the page to create new random sheet music.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}